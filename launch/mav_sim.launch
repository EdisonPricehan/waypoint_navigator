<launch>

  <!-- Start Gazebo, spawn MAV -->
  <arg name="mav_name" default="firefly"/>
  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="log_file" default="$(arg mav_name)"/>

  <!-- Initial MAV location and attitude-->
  <arg name="x" default="0" />
  <arg name="y" default="0" />
  <arg name="z" default="0.1" />
  <arg name="R" default="0" />
  <arg name="P" default="0" />
  <arg name="Y" default="0" />

  <!-- Uncomment this to launch gazebo world if want to test the current launch file separately -->
<!--  <include file="$(find gazebo_ros)/launch/empty_world.launch">-->
<!--    <arg name="world_name" value="$(find rotors_gazebo)/worlds/basic.world"/>-->
<!--    &lt;!&ndash; <arg name="debug" value="true" /> &ndash;&gt;-->
<!--    <arg name="paused" value="false" />-->
<!--    &lt;!&ndash; <arg name="gui" value="false" /> &ndash;&gt;-->
<!--  </include>-->

  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_with_vi_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="x" value="$(arg x)"/>
      <arg name="y" value="$(arg y)"/>
      <arg name="z" value="$(arg z)"/>
      <arg name="R" value="$(arg R)"/>
      <arg name="P" value="$(arg P)"/>
      <arg name="Y" value="$(arg Y)"/>
    </include>

    <!-- Start GPS converter -->
    <node name="set_gps_reference_node" pkg="geodetic_utils" type="set_gps_reference_node" clear_params="true" output="screen" args="10">
      <remap from="gps" to="fix" />
    </node>

    <node name="gps_to_pose_conversion_node" pkg="geodetic_utils" type="gps_to_pose_conversion_node" clear_params="true" output="screen">
      <remap from="gps" to="fix" />
      <remap from="imu" to="raw_imu" />
      <param name="is_sim" value="false" />
      <param name="frame_id" value="world" />
      <param name="tf_child_frame_id" value="$(arg mav_name)/base_link" />
      <param name="trust_gps" value="true" />
      <param name="publish_pose" value="true" />
      <rosparam file="$(find geodetic_utils)/parameters/gps_pose_covariance.yaml"/>
    </node>

    <!-- Open conf rviz -->
<!--    <node type="rviz" name="rviz" pkg="rviz" args="-d $(find waypoint_navigator)/viz/waypoint_navigator_sim.viz.rviz" />-->

    <!-- Start controller -->
    <node name="mav_linear_mpc" pkg="mav_linear_mpc" type="mav_linear_mpc_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_linear_mpc)/resources/linear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="verbose" value="false" />
      <param name="use_rc_teleop" value="false" />
      <param name="reference_frame" value="world" />
    </node>

    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
<rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>

    <node name="auto_navigator" pkg="rotors_gazebo" type="auto_navigator" output="screen" >
<!--      <remap from="odometry" to="odometry_sensor1/odometry" />-->
      <remap from="odometry" to="ground_truth/odometry" />
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  </group>

  <include file="$(find waypoint_navigator)/launch/waypoint_navigator.launch" >
    <arg name="namespace" value="$(arg mav_name)" />
  </include>

</launch>
